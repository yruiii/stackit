module x_bit_left_shifter#(
    SHIFT = 8 : SHIFT > -1 & SHIFT < 16) (
    input a[16],
    input pad,
    input shift,
    output out[16]
  ) {
  var i;
  sig shifted_bits[16];
  mux_2 mux32[16];
  always { 
    case (SHIFT) {
      8: shifted_bits = c{a[7:0], 8x{pad}};
      4: shifted_bits = c{a[11:0], 4x{pad}};
      2: shifted_bits = c{a[13:0], 2x{pad}};
      1: shifted_bits = c{a[14:0], 1x{pad}};
      default: 
        shifted_bits = a;
    }
    for (i = 0; i < 16; i++) {
      mux32.in[i][0] = a[i];
      mux32.in[i][1] = shifted_bits[i];
      mux32.s0[i] = shift;
       
    }
    out = mux32.out; 
  }
}